function(move_to_plugins_folder TARGET_NAME TARGET_SUFFIX)
  add_custom_command(
    TARGET ${TARGET_NAME}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory
            ${OUT_DIR}${CMAKE_CFG_INTDIR}/plugins)

  add_custom_command(
    TARGET ${TARGET_NAME}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory ${OUT_DIR}/plugins)
  # move plugin to the plugins folder
  add_custom_command(
    TARGET ${TARGET_NAME}
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND} -E copy_if_different
      ${OUT_DIR}${CMAKE_CFG_INTDIR}/${TARGET_NAME}${TARGET_SUFFIX}
      "${OUT_DIR}${CMAKE_CFG_INTDIR}/plugins")

  add_custom_command(
    TARGET ${TARGET_NAME}
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND} -E copy_if_different
      ${OUT_DIR}${CMAKE_CFG_INTDIR}/${TARGET_NAME}${TARGET_SUFFIX}
      "${CMAKE_BINARY_DIR}/plugins")

  # add_custom_command( TARGET ${TARGET_NAME} POST_BUILD COMMAND
  # ${CMAKE_COMMAND} -E copy_if_different
  # ${OUT_DIR}${CMAKE_CFG_INTDIR}/${TARGET_NAME}${TARGET_SUFFIX}
  # "${CMAKE_BINARY_DIR}/plugins")

  # pleora genicam
endfunction()

function(deploy_dependencies_lib TARGET_NAME)
  foreach(TARGET_LIB ${ARGN})
    get_target_property(EXTRA_TARGET_DEPENDENCIES_COMMON ${TARGET_LIB}
                        TARGET_DEPENDENCIES_COMMON)
    get_target_property(EXTRA_TARGET_DEPENDENCIES_DEBUG ${TARGET_LIB}
                        TARGET_DEPENDENCIES_DEBUG)
    get_target_property(EXTRA_TARGET_DEPENDENCIES_RELEASE ${TARGET_LIB}
                        TARGET_DEPENDENCIES_RELEASE)
    # message ("deploying for: ${TARGET_LIB}"
    # ${EXTRA_TARGET_DEPENDENCIES_COMMON} ${EXTRA_TARGET_DEPENDENCIES_DEBUG}
    # ${EXTRA_TARGET_DEPENDENCIES_RELEASE} )
    deploy_dependencies(
      ${TARGET_NAME} "${EXTRA_TARGET_DEPENDENCIES_COMMON}"
      "${EXTRA_TARGET_DEPENDENCIES_DEBUG}"
      "${EXTRA_TARGET_DEPENDENCIES_RELEASE}")
  endforeach()
endfunction()

function(deploy_dependencies TARGET_NAME TARGET_DEPENDENCIES_COMMON
         TARGET_DEPENDENCIES_DEBUG TARGET_DEPENDENCIES_RELEASE)
  # ############################################################################
  # common libs, copy always (if changed)
  # ############################################################################
  foreach(f ${TARGET_DEPENDENCIES_COMMON})
    add_custom_command(
      TARGET ${TARGET_NAME}
      POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different "${f}"
              "${OUT_DIR}${CMAKE_CFG_INTDIR}")
  endforeach()

  # ############################################################################
  # debug specific libs (copy if the build/configuration type is matching)
  # ############################################################################
  foreach(f ${TARGET_DEPENDENCIES_DEBUG})
    add_custom_command(
      TARGET ${TARGET_NAME}
      POST_BUILD
      COMMAND
        ${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG>
        -DOUT_DIR=${OUT_DIR}${CMAKE_CFG_INTDIR} -DFILE="${f}"
        -DCURRENT_DLL="Debug" -P ${CMAKE_SOURCE_DIR}/cmake/post_copy_dlls.cmake)
  endforeach()

  # ############################################################################
  # release specific libs (copy if the build/configuration type is matching)
  # ############################################################################
  foreach(f ${TARGET_DEPENDENCIES_RELEASE})
    add_custom_command(
      TARGET ${TARGET_NAME}
      POST_BUILD
      COMMAND
        ${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG>
        -DOUT_DIR=${OUT_DIR}${CMAKE_CFG_INTDIR} -DFILE="${f}"
        -DCURRENT_DLL="Release" -P
        ${CMAKE_SOURCE_DIR}/cmake/post_copy_dlls.cmake)
    add_custom_command(
      TARGET ${TARGET_NAME}
      POST_BUILD
      COMMAND
        ${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG>
        -DOUT_DIR=${OUT_DIR}${CMAKE_CFG_INTDIR} -DFILE="${f}"
        -DCURRENT_DLL="RelWithDebInfo" -P
        ${CMAKE_SOURCE_DIR}/cmake/post_copy_dlls.cmake)
  endforeach()
endfunction()

function(deploy_xsd_before_build ${TARGET_NAME})
  # create XSD directoy if it does not exist
  add_custom_command(
    TARGET ${TARGET_NAME}
    PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/xsd")

  file(GLOB_RECURSE XSD_FILES *.xsd)
  foreach(xsdFile ${XSD_FILES})
    add_custom_command(
      TARGET ${TARGET_NAME}
      PRE_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different "${xsdFile}"
              "${CMAKE_BINARY_DIR}/xsd")
  endforeach()
endfunction()

function(add_install_stage_to_target TARGET_NAME)
  # the artifacts generated by the target to be installed. Only for release
  install(TARGETS ${TARGET_NAME} RUNTIME DESTINATION ${CMAKE_BINARY_DIR}/install
                                         CONFIGURATIONS RELEASE RELWITHDEBINFO)

  # libs
  install(
    DIRECTORY ${CMAKE_BINARY_DIR}/bin/Release/
    DESTINATION ${CMAKE_BINARY_DIR}/install
    CONFIGURATIONS RELEASE
    PATTERN "*_UTest.*" EXCLUDE
    PATTERN "qt-deployed.stamp" EXCLUDE)
  install(
    DIRECTORY ${CMAKE_BINARY_DIR}/bin/RELWITHDEBINFO/
    DESTINATION ${CMAKE_BINARY_DIR}/install
    CONFIGURATIONS RELWITHDEBINFO
    PATTERN "*_UTest.*" EXCLUDE
    PATTERN "qt-deployed.stamp" EXCLUDE)

  # profiles
  install(
    DIRECTORY "${CMAKE_SOURCE_DIR}/profiles"
    DESTINATION ${CMAKE_BINARY_DIR}/install
    CONFIGURATIONS RELEASE RELWITHDEBINFO)
endfunction()

function(add_deploy_stage_to_target TARGET_NAME)
  # for logging tests
  add_custom_command(
    TARGET ${TARGET_NAME}
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND}
      -Ddestinationfile="${CMAKE_BINARY_DIR}/log4cplus_tests.properties"
      -Dsourcefile="${CMAKE_SOURCE_DIR}/tests/log4cplus_tests.properties" -P
      ${CMAKE_SOURCE_DIR}/cmake/copy_if_not_exists.cmake)

  # eulas and other licenses
  if(NOT EXISTS ${CMAKE_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}/Legal/EULA.txt)
    add_custom_command(
      TARGET ${TARGET_NAME}
      PRE_BUILD
      COMMAND ${CMAKE_COMMAND} -E make_directory
              "${CMAKE_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}/Legal")
    add_custom_command(
      TARGET ${TARGET_NAME}
      PRE_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Legal
              ${CMAKE_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}/Legal)
  endif()
endfunction()
